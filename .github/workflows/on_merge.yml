name: Audio Processing - Production

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'audio_inputs/**/*.mp3'
      - 'process_audio.py'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      target_language:
        description: 'Target language code (e.g., es, fr, de)'
        required: false
        default: 'es'
      confirm_production:
        description: 'Type "PRODUCTION" to confirm deployment'
        required: true
        default: ''

jobs:
  validate-production:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Validate production confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_production }}" != "PRODUCTION" ]; then
            echo "Production deployment not confirmed"
            echo "Please type 'PRODUCTION' in the confirmation field"
            exit 1
          fi
          echo "Production deployment confirmed"
  
  process-audio-prod:
    runs-on: ubuntu-latest
    needs: [validate-production]
    if: |
      always() && 
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && needs.validate-production.result == 'success'))
    
    permissions:
      contents: read
      id-token: write  # Required for AWS OIDC authentication
      issues: write  # To create issues on failure
    
    environment:
      name: production
      url: https://s3.console.aws.amazon.com/s3/buckets/${{ secrets.PROD_S3_BUCKET_NAME }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Configure AWS credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Alternative: Use AWS access keys (less secure)
      - name: Configure AWS credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Verify production environment
        run: |
          echo "PRODUCTION DEPLOYMENT"
          echo "=================================="
          echo "Bucket: ${{ secrets.PROD_S3_BUCKET_NAME }}"
          echo "Region: ${{ secrets.AWS_REGION }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "=================================="
      
      - name: Process audio files in Production
        id: process
        env:
          S3_BUCKET_NAME: ${{ secrets.PROD_S3_BUCKET_NAME }}
          TARGET_LANGUAGE: ${{ github.event.inputs.target_language || 'es' }}
          SOURCE_LANGUAGE: 'en-US'
          INPUT_FOLDER: 'audio_inputs'
        run: |
          echo "Processing audio files in PRODUCTION"
          
          python process_audio.py 2>&1 | tee processing.log
          
          # Extract results for summary
          TOTAL=$(grep "Total files:" processing.log | grep -oP '\d+' || echo "0")
          SUCCESS=$(grep "Successful:" processing.log | grep -oP '\d+' || echo "0")
          FAILED=$(grep "Failed:" processing.log | grep -oP '\d+' || echo "0")
          
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          
          # Check if any files were processed
          if [ "$TOTAL" = "0" ]; then
            echo "No audio files found to process"
          fi
      
      - name: Generate processing report
        if: always()
        run: |
          cat > production-report.md << 'EOF'
          # Production Audio Processing Report
          
          **Deployment Information:**
          - **Environment:** Production
          - **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Branch:** ${{ github.ref_name }}
          - **Commit:** ${{ github.sha }}
          - **Triggered by:** ${{ github.actor }}
          - **Workflow:** ${{ github.workflow }}
          
          **Processing Results:**
          - Total files: ${{ steps.process.outputs.total || 0 }}
          - Successful: ${{ steps.process.outputs.success || 0 }}
          - Failed: ${{ steps.process.outputs.failed || 0 }}
          
          **Configuration:**
          - S3 Bucket: `${{ secrets.PROD_S3_BUCKET_NAME }}`
          - Target Language: `${{ github.event.inputs.target_language || 'es' }}`
          - Source Language: `en-US`
          
          ---
          
          ## Processing Log
          
          ```
          EOF
          
          tail -n 100 processing.log >> production-report.md
          
          cat >> production-report.md << 'EOF'
          ```
          
          ---
          
          **S3 Output Locations:**
          - Transcripts: `s3://${{ secrets.PROD_S3_BUCKET_NAME }}/transcripts/`
          - Translations: `s3://${{ secrets.PROD_S3_BUCKET_NAME }}/translations/`
          - Audio Outputs: `s3://${{ secrets.PROD_S3_BUCKET_NAME }}/audio_outputs/`
          EOF
      
      - name: Upload production logs and report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prod-processing-${{ github.run_number }}-${{ github.sha }}
          path: |
            processing.log
            production-report.md
            *.log
          retention-days: 90
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let log = '';
            try {
              log = fs.readFileSync('processing.log', 'utf8');
            } catch (e) {
              log = 'Log file not available';
            }
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Audio Processing Failed - Run #${{ github.run_number }}`,
              body: `## Production Deployment Failure
              
              **Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Branch:** \`${{ github.ref_name }}\`
              **Commit:** ${{ github.sha }}
              **Triggered by:** @${{ github.actor }}
              
              ### Error Details
              
              The audio processing pipeline failed in production. Please review the logs and take immediate action.
              
              <details>
              <summary>View Error Log (last 1000 chars)</summary>
              
              \`\`\`
              ${log.slice(-1000)}
              \`\`\`
              
              </details>
              
              ### Action Items
              - [ ] Review the full logs in the workflow artifacts
              - [ ] Identify the root cause
              - [ ] Fix the issue
              - [ ] Re-run the workflow or push a fix
              
              ### Links
              - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              - [S3 Console](https://s3.console.aws.amazon.com/s3/buckets/${{ secrets.PROD_S3_BUCKET_NAME }})
              `,
              labels: ['bug', 'production', 'audio-processing']
            });
            
            console.log(`Created issue #${issue.data.number}`);
      
      - name: Send Slack notification (optional)
        if: always() && secrets.SLACK_WEBHOOK_URL
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ job.status == 'success' && '!!' || '!' }} Production Audio Processing ${{ job.status }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ job.status == 'success' && 'Production Processing Complete' || 'Production Processing Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Files Processed:*\n${{ steps.process.outputs.success || 0 }}/${{ steps.process.outputs.total || 0 }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Failed:*\n${{ steps.process.outputs.failed || 0 }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
      - name: Verify processing success
        run: |
          if [ "${{ steps.process.outputs.failed }}" != "0" ]; then
            echo "Production processing completed with failures"
            echo "Failed files: ${{ steps.process.outputs.failed }}"
            exit 1
          fi
          
          if [ "${{ steps.process.outputs.total }}" = "0" ]; then
            echo "No files were processed"
            exit 0
          fi
          
          echo "All files processed successfully in production"
          echo "Processed: ${{ steps.process.outputs.success }} files"